package com.webank.ddcms.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.StaticStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DataSchemaContract extends Contract {
  public static final String[] BINARY_ARRAY = {"","","00000000000000000000000000000000000000600052601260045260246000fd5b6000611eaa82611458565b9150611eb583611458565b925082611ec557611ec4611e70565b5b828204905092915050565b611ed9816113d1565b82525050565b600060c082019050611ef46000830189611449565b611f016020830188611449565b611f0e6040830187611ed0565b611f1b6060830186611462565b611f286080830185611462565b611f3560a08301846114d9565b979650505050505050565b7f6461746120736368656d61206e6f742065786973740000000000000000000000600082015250565b6000611f76601583611b8a565b9150611f8182611f40565b602082019050919050565b60006020820190508181036000830152611fa581611f69565b9050919050565b6000602082019050611fc16000830184611449565b92915050565b60058110611fd457600080fd5b50565b600081519050611fe681611fc7565b92915050565b60006060828403121561200257612001611a41565b5b61200c6060611663565b9050600061201c84828501611a72565b600083015250602061203084828501611a72565b602083015250604061204484828501611fd7565b60408301525092915050565b60006060828403121561206657612065611391565b5b600061207484828501611fec565b91505092915050565b7f70726f64756374206e6f7420617070726f766564000000000000000000000000600082015250565b60006120b3601483611b8a565b91506120be8261207d565b602082019050919050565b600060208201905081810360008301526120e2816120a6565b9050919050565b7f6d7573742062652070726f64756374206f776e65720000000000000000000000600082015250565b600061211f601583611b8a565b915061212a826120e9565b602082019050919050565b6000602082019050818103600083015261214e81612112565b9050919050565b7f6f776e6572206e6f7420617070726f7665640000000000000000000000000000600082015250565b600061218b601283611b8a565b915061219682612155565b602082019050919050565b600060208201905081810360008301526121ba8161217e565b9050919050565b600081905092915050565b60006121d78261180f565b6121e181856121c1565b93506121f181856020860161182b565b80840191505092915050565b600061220982866121cc565b915061221582856121cc565b915061222182846121cc565b9150819050949350505050565b600061223a82846121cc565b915081905092915050565b7f64617461206973206e6f7420636f6e73697374656e7400000000000000000000600082015250565b600061227b601683611b8a565b915061228682612245565b602082019050919050565b600060208201905081810360008301526122aa8161226e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806122f857607f821691505b6020821081141561230c5761230b6122b1565b5b50919050565b7f496e76616c696420686173680000000000000000000000000000000000000000600082015250565b6000612348600c83611b8a565b915061235382612312565b602082019050919050565b600060208201905081810360008301526123778161233b565b9050919050565b7f496e76616c69642070726f647563744964000000000000000000000000000000600082015250565b60006123b4601183611b8a565b91506123bf8261237e565b602082019050919050565b600060208201905081810360008301526123e3816123a7565b9050919050565b7f6475706c6963617465206461746120736368656d612068617368000000000000600082015250565b6000612420601a83611b8a565b915061242b826123ea565b602082019050919050565b6000602082019050818103600083015261244f81612413565b9050919050565b600061246182611458565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561249457612493611db7565b5b600182019050919050565b600481106124b0576124af611471565b5b50565b60008190506124c18261249f565b919050565b60006124d1826124b3565b9050919050565b6124e1816124c6565b82525050565b60006020820190506124fc60008301846124d8565b92915050565b61250b81611458565b811461251657600080fd5b50565b60008151905061252881612502565b92915050565b60006020828403121561254457612543611391565b5b600061255284828501612519565b91505092915050565b60006040820190506125706000830185611449565b61257d6020830184611449565b9392505050565b600061258f8261180f565b6125998185611b8a565b93506125a981856020860161182b565b6125b2816115f2565b840191505092915050565b600060408201905081810360008301526125d78185612584565b905081810360208301526125eb8184612584565b9050939250505056fea2646970667358221220ff86eeb2f961ef2708d62cb196a31a17be628e6798f4d6572b07a5a8fed85cb764736f6c634300080b0033"};

  public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

  public static final String[] SM_BINARY_ARRAY = {"","","00000000000000000000000000000000000000600052601260045260246000fd5b6000611eaa82611458565b9150611eb583611458565b925082611ec557611ec4611e70565b5b828204905092915050565b611ed9816113d1565b82525050565b600060c082019050611ef46000830189611449565b611f016020830188611449565b611f0e6040830187611ed0565b611f1b6060830186611462565b611f286080830185611462565b611f3560a08301846114d9565b979650505050505050565b7f6461746120736368656d61206e6f742065786973740000000000000000000000600082015250565b6000611f76601583611b8a565b9150611f8182611f40565b602082019050919050565b60006020820190508181036000830152611fa581611f69565b9050919050565b6000602082019050611fc16000830184611449565b92915050565b60058110611fd457600080fd5b50565b600081519050611fe681611fc7565b92915050565b60006060828403121561200257612001611a41565b5b61200c6060611663565b9050600061201c84828501611a72565b600083015250602061203084828501611a72565b602083015250604061204484828501611fd7565b60408301525092915050565b60006060828403121561206657612065611391565b5b600061207484828501611fec565b91505092915050565b7f70726f64756374206e6f7420617070726f766564000000000000000000000000600082015250565b60006120b3601483611b8a565b91506120be8261207d565b602082019050919050565b600060208201905081810360008301526120e2816120a6565b9050919050565b7f6d7573742062652070726f64756374206f776e65720000000000000000000000600082015250565b600061211f601583611b8a565b915061212a826120e9565b602082019050919050565b6000602082019050818103600083015261214e81612112565b9050919050565b7f6f776e6572206e6f7420617070726f7665640000000000000000000000000000600082015250565b600061218b601283611b8a565b915061219682612155565b602082019050919050565b600060208201905081810360008301526121ba8161217e565b9050919050565b600081905092915050565b60006121d78261180f565b6121e181856121c1565b93506121f181856020860161182b565b80840191505092915050565b600061220982866121cc565b915061221582856121cc565b915061222182846121cc565b9150819050949350505050565b600061223a82846121cc565b915081905092915050565b7f64617461206973206e6f7420636f6e73697374656e7400000000000000000000600082015250565b600061227b601683611b8a565b915061228682612245565b602082019050919050565b600060208201905081810360008301526122aa8161226e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806122f857607f821691505b6020821081141561230c5761230b6122b1565b5b50919050565b7f496e76616c696420686173680000000000000000000000000000000000000000600082015250565b6000612348600c83611b8a565b915061235382612312565b602082019050919050565b600060208201905081810360008301526123778161233b565b9050919050565b7f496e76616c69642070726f647563744964000000000000000000000000000000600082015250565b60006123b4601183611b8a565b91506123bf8261237e565b602082019050919050565b600060208201905081810360008301526123e3816123a7565b9050919050565b7f6475706c6963617465206461746120736368656d612068617368000000000000600082015250565b6000612420601a83611b8a565b915061242b826123ea565b602082019050919050565b6000602082019050818103600083015261244f81612413565b9050919050565b600061246182611458565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561249457612493611db7565b5b600182019050919050565b600481106124b0576124af611471565b5b50565b60008190506124c18261249f565b919050565b60006124d1826124b3565b9050919050565b6124e1816124c6565b82525050565b60006020820190506124fc60008301846124d8565b92915050565b61250b81611458565b811461251657600080fd5b50565b60008151905061252881612502565b92915050565b60006020828403121561254457612543611391565b5b600061255284828501612519565b91505092915050565b60006040820190506125706000830185611449565b61257d6020830184611449565b9392505050565b600061258f8261180f565b6125998185611b8a565b93506125a981856020860161182b565b6125b2816115f2565b840191505092915050565b600060408201905081810360008301526125d78185612584565b905081810360208301526125eb8184612584565b9050939250505056fea2646970667358221220ff86eeb2f961ef2708d62cb196a31a17be628e6798f4d6572b07a5a8fed85cb764736f6c634300080b0033"};

  public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

  public static final String[] ABI_ARRAY = {"[{\"name\":null,\"type\":\"constructor\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"conflictFields\":[],\"inputs\":[{\"name\":\"_accountContract\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_productContract\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"null(address,address)\"},{\"name\":\"CreateDataDetailEvent\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"dataSchemaName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"contentJson\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"CreateDataDetailEvent(bytes32,string,string)\"},{\"name\":\"CreateDataSchemaEvent\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"CreateDataSchemaEvent(bytes32,bytes32)\"},{\"name\":\"VoteDataSchemaEvent\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"voterId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"agree\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"},{\"name\":\"agreeCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"denyCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"afterStatus\",\"type\":\"uint8\",\"internalType\":\"enum DataSchemaContract.DataSchemaStatus\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"VoteDataSchemaEvent(bytes32,bytes32,bool,uint256,uint256,uint8)\"},{\"name\":\"approveDataSchema\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"agree\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}],\"outputs\":[{\"name\":\"witnessDid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"agreeCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"denyCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"afterStatus\",\"type\":\"uint8\",\"internalType\":\"enum DataSchemaContract.DataSchemaStatus\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"selector\":[],\"methodSignatureAsString\":\"approveDataSchema(bytes32,bool)\"},{\"name\":\"createDataDetail\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"conflictFields\":[],\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"productBid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"productId\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_contentJson\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"dataSchemaName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"createDataDetail(bytes32,bytes32,bytes32,string,string,string)\"},{\"name\":\"createDataSchema\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"conflictFields\":[],\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"productId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"witnessCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"selector\":[],\"methodSignatureAsString\":\"createDataSchema(bytes32,bytes32)\"},{\"name\":\"getDataDetail\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"struct DataSchemaContract.DataDetail\",\"indexed\":false,\"components\":[{\"name\":\"dataSchemaName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"contentJson\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"dynamic\":true,\"typeAsString\":\"(string,string)\"}],\"selector\":[],\"methodSignatureAsString\":\"getDataDetail(bytes32)\"},{\"name\":\"getDataSchema\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[{\"name\":\"dataSchema\",\"type\":\"tuple\",\"internalType\":\"struct DataSchemaContract.DataSchemaInfo\",\"indexed\":false,\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"ownerId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"productId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enum DataSchemaContract.DataSchemaStatus\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"dynamic\":false,\"typeAsString\":\"(bytes32,bytes32,bytes32,uint8)\"}],\"selector\":[],\"methodSignatureAsString\":\"getDataSchema(bytes32)\"},{\"name\":\"getVoteInfo\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"struct DataSchemaContract.VoteInfo\",\"indexed\":false,\"components\":[{\"name\":\"agreeCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false",",\"typeAsString\":\"uint256\"},{\"name\":\"denyCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"threshold\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"witnessCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"dynamic\":false,\"typeAsString\":\"(uint256,uint256,uint256,uint256)\"}],\"selector\":[],\"methodSignatureAsString\":\"getVoteInfo(bytes32)\"}]"};

  public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

  public static final String FUNC_APPROVEDATASCHEMA = "approveDataSchema";

  public static final String FUNC_CREATEDATADETAIL = "createDataDetail";

  public static final String FUNC_CREATEDATASCHEMA = "createDataSchema";

  public static final String FUNC_GETDATADETAIL = "getDataDetail";

  public static final String FUNC_GETDATASCHEMA = "getDataSchema";

  public static final String FUNC_GETVOTEINFO = "getVoteInfo";

  public static final Event CREATEDATADETAILEVENT_EVENT = new Event("CreateDataDetailEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
  ;

  public static final Event CREATEDATASCHEMAEVENT_EVENT = new Event("CreateDataSchemaEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
  ;

  public static final Event VOTEDATASCHEMAEVENT_EVENT = new Event("VoteDataSchemaEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
  ;

  protected DataSchemaContract(String contractAddress, Client client, CryptoKeyPair credential) {
    super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
  }

  public static String getBinary(CryptoSuite cryptoSuite) {
    return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
  }

  public static String getABI() {
    return ABI;
  }

  public List<CreateDataDetailEventEventResponse> getCreateDataDetailEventEvents(
          TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEDATADETAILEVENT_EVENT, transactionReceipt);
    ArrayList<CreateDataDetailEventEventResponse> responses = new ArrayList<CreateDataDetailEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      CreateDataDetailEventEventResponse typedResponse = new CreateDataDetailEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.dataSchemaId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.dataSchemaName = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.contentJson = (String) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public List<CreateDataSchemaEventEventResponse> getCreateDataSchemaEventEvents(
          TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEDATASCHEMAEVENT_EVENT, transactionReceipt);
    ArrayList<CreateDataSchemaEventEventResponse> responses = new ArrayList<CreateDataSchemaEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      CreateDataSchemaEventEventResponse typedResponse = new CreateDataSchemaEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public List<VoteDataSchemaEventEventResponse> getVoteDataSchemaEventEvents(
          TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTEDATASCHEMAEVENT_EVENT, transactionReceipt);
    ArrayList<VoteDataSchemaEventEventResponse> responses = new ArrayList<VoteDataSchemaEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      VoteDataSchemaEventEventResponse typedResponse = new VoteDataSchemaEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.voterId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
      typedResponse.agree = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
      typedResponse.agreeCount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
      typedResponse.denyCount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
      typedResponse.afterStatus = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public TransactionReceipt approveDataSchema(byte[] dataSchemaId, Boolean agree) {
    final Function function = new Function(
            FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(agree)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return executeTransaction(function);
  }

  public String getSignedTransactionForApproveDataSchema(byte[] dataSchemaId, Boolean agree) {
    final Function function = new Function(
            FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(agree)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return createSignedTransaction(function);
  }

  public String approveDataSchema(byte[] dataSchemaId, Boolean agree,
                                  TransactionCallback callback) {
    final Function function = new Function(
            FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(agree)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return asyncExecuteTransaction(function, callback);
  }

  public Tuple2<byte[], Boolean> getApproveDataSchemaInput(
          TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<byte[], Boolean>(

            (byte[]) results.get(0).getValue(),
            (Boolean) results.get(1).getValue()
    );
  }

  public Tuple4<byte[], BigInteger, BigInteger, BigInteger> getApproveDataSchemaOutput(
          TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getOutput();
    final Function function = new Function(FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple4<byte[], BigInteger, BigInteger, BigInteger>(

            (byte[]) results.get(0).getValue(),
            (BigInteger) results.get(1).getValue(),
            (BigInteger) results.get(2).getValue(),
            (BigInteger) results.get(3).getValue()
    );
  }

  public TransactionReceipt createDataDetail(byte[] _hash, byte[] productBid, byte[] dataSchemaId,
                                             String productId, String _contentJson, String dataSchemaName) {
    final Function function = new Function(
            FUNC_CREATEDATADETAIL,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productBid),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(productId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_contentJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataSchemaName)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return executeTransaction(function);
  }

  public String getSignedTransactionForCreateDataDetail(byte[] _hash, byte[] productBid,
                                                        byte[] dataSchemaId, String productId, String _contentJson, String dataSchemaName) {
    final Function function = new Function(
            FUNC_CREATEDATADETAIL,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productBid),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(productId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_contentJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataSchemaName)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return createSignedTransaction(function);
  }

  public String createDataDetail(byte[] _hash, byte[] productBid, byte[] dataSchemaId,
                                 String productId, String _contentJson, String dataSchemaName,
                                 TransactionCallback callback) {
    final Function function = new Function(
            FUNC_CREATEDATADETAIL,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productBid),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(productId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_contentJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataSchemaName)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return asyncExecuteTransaction(function, callback);
  }

  public Tuple6<byte[], byte[], byte[], String, String, String> getCreateDataDetailInput(
          TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_CREATEDATADETAIL,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple6<byte[], byte[], byte[], String, String, String>(

            (byte[]) results.get(0).getValue(),
            (byte[]) results.get(1).getValue(),
            (byte[]) results.get(2).getValue(),
            (String) results.get(3).getValue(),
            (String) results.get(4).getValue(),
            (String) results.get(5).getValue()
    );
  }

  public TransactionReceipt createDataSchema(byte[] hash, byte[] productId) {
    final Function function = new Function(
            FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productId)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return executeTransaction(function);
  }

  public String getSignedTransactionForCreateDataSchema(byte[] hash, byte[] productId) {
    final Function function = new Function(
            FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productId)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return createSignedTransaction(function);
  }

  public String createDataSchema(byte[] hash, byte[] productId, TransactionCallback callback) {
    final Function function = new Function(
            FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productId)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return asyncExecuteTransaction(function, callback);
  }

  public Tuple2<byte[], byte[]> getCreateDataSchemaInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<byte[], byte[]>(

            (byte[]) results.get(0).getValue(),
            (byte[]) results.get(1).getValue()
    );
  }

  public Tuple2<byte[], BigInteger> getCreateDataSchemaOutput(
          TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getOutput();
    final Function function = new Function(FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<byte[], BigInteger>(

            (byte[]) results.get(0).getValue(),
            (BigInteger) results.get(1).getValue()
    );
  }

  public DataDetail getDataDetail(byte[] dataSchemaId) throws ContractException {
    final Function function = new Function(FUNC_GETDATADETAIL,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<DataDetail>() {}));
    return executeCallWithSingleValueReturn(function, DataDetail.class);
  }

  public DataSchemaInfo getDataSchema(byte[] dataSchemaId) throws ContractException {
    final Function function = new Function(FUNC_GETDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<DataSchemaInfo>() {}));
    return executeCallWithSingleValueReturn(function, DataSchemaInfo.class);
  }

  public VoteInfo getVoteInfo(byte[] dataSchemaId) throws ContractException {
    final Function function = new Function(FUNC_GETVOTEINFO,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<VoteInfo>() {}));
    return executeCallWithSingleValueReturn(function, VoteInfo.class);
  }

  public static DataSchemaContract load(String contractAddress, Client client,
                                        CryptoKeyPair credential) {
    return new DataSchemaContract(contractAddress, client, credential);
  }

  public static DataSchemaContract deploy(Client client, CryptoKeyPair credential,
                                          String _accountContract, String _productContract) throws ContractException {
    byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_accountContract),
            new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_productContract)));
    return deploy(DataSchemaContract.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
  }

  public static class DataDetail extends DynamicStruct {
    public String dataSchemaName;

    public String contentJson;

    public DataDetail(Utf8String dataSchemaName, Utf8String contentJson) {
      super(dataSchemaName,contentJson);
      this.dataSchemaName = dataSchemaName.getValue();
      this.contentJson = contentJson.getValue();
    }

    public DataDetail(String dataSchemaName, String contentJson) {
      super(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataSchemaName),new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(contentJson));
      this.dataSchemaName = dataSchemaName;
      this.contentJson = contentJson;
    }
  }

  public static class DataSchemaInfo extends StaticStruct {
    public byte[] hash;

    public byte[] ownerId;

    public byte[] productId;

    public BigInteger status;

    public DataSchemaInfo(Bytes32 hash, Bytes32 ownerId, Bytes32 productId, Uint8 status) {
      super(hash,ownerId,productId,status);
      this.hash = hash.getValue();
      this.ownerId = ownerId.getValue();
      this.productId = productId.getValue();
      this.status = status.getValue();
    }

    public DataSchemaInfo(byte[] hash, byte[] ownerId, byte[] productId, BigInteger status) {
      super(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(ownerId),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productId),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8(status));
      this.hash = hash;
      this.ownerId = ownerId;
      this.productId = productId;
      this.status = status;
    }
  }

  public static class VoteInfo extends StaticStruct {
    public BigInteger agreeCount;

    public BigInteger denyCount;

    public BigInteger threshold;

    public BigInteger witnessCount;

    public VoteInfo(Uint256 agreeCount, Uint256 denyCount, Uint256 threshold,
                    Uint256 witnessCount) {
      super(agreeCount,denyCount,threshold,witnessCount);
      this.agreeCount = agreeCount.getValue();
      this.denyCount = denyCount.getValue();
      this.threshold = threshold.getValue();
      this.witnessCount = witnessCount.getValue();
    }

    public VoteInfo(BigInteger agreeCount, BigInteger denyCount, BigInteger threshold,
                    BigInteger witnessCount) {
      super(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(agreeCount),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(denyCount),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(threshold),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(witnessCount));
      this.agreeCount = agreeCount;
      this.denyCount = denyCount;
      this.threshold = threshold;
      this.witnessCount = witnessCount;
    }
  }

  public static class CreateDataDetailEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] dataSchemaId;

    public String dataSchemaName;

    public String contentJson;
  }

  public static class CreateDataSchemaEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] dataSchemaId;

    public byte[] hash;
  }

  public static class VoteDataSchemaEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] dataSchemaId;

    public byte[] voterId;

    public Boolean agree;

    public BigInteger agreeCount;

    public BigInteger denyCount;

    public BigInteger afterStatus;
  }
}
